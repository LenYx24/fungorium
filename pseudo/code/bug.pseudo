METHOD Move(destination) -> implemented
    neighbours := tecton.IsNeighbourOf(destination)
    hasGrownShroomThreadTo := tecton.HasGrownShroomThreadTo(destination)

    IF neighbours AND hasGrownShroomThreadTo AND canMove THEN
        tecton.RemoveBug(this)
        destination.AddBug(this)
        tecton := destination

        RETURN TRUE
    ELSE
        RETURN FALSE
    END IF

END METHOD

METHOD Eat(spore) -> implemented
    isOnSameTecton := tecton == spore.GetTecton()

    IF isOnSameTecton THEN
        spore.EatenBy(this)
        RETURN TRUE
    ELSE
        RETURN FALSE
    END IF

END METHOD

METHOD CutThread(thread) -> implemented
    reachable := thread.IsTectonReachable(tecton)

    IF canCut AND reachable THEN
        thread.Remove()
        actCatalog.DecreasePoints(cutThreadCost)
        RETURN TRUE
    ELSE
        RETURN FALSE
    END IF

END METHOD

METHOD Split() -> implemented
    newBug := NEW Bug

    FOR EACH effect IN effects
        newBug.AddEffect(effect)
    END FOR

    newBug.SetTecton(tecton)
    bugOwner.AddBug(newBug)
END METHOD

METHOD UpdateBug() -> implemented
    LoadDefaultCosts()

    FOR EACH bugEffect IN bugEffects DO
        bugEffect.ApplyOn(this)
    END FOR

END METHOD

METHOD LoadDefaultCosts() -> implemented
    moveCost := 1
    eatCost := 2
    cutcost := 2
END METHOD