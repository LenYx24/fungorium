METHOD SpreadEntities(copyTecton) -> implemented
    FOR EACH neighbour IN neighbours DO
        copyTecton.neighbours.Add(neighbour)
        neighbour.neighbours.Add(copyTecton)
    END FOR

    neighbours.Add(copyTecton)

    FOR EACH bug IN bugs DO
        transferBug := RANDOM OF [ TRUE, FALSE ]
        IF transferBug THEN
            copyTecton.AddBug(bug)
            bug.SetTecton(copyTecton)
            bugs.Remove(bug)
        END IF
    END FOR

    FOR EACH spore IN spores DO
        transferBug := RANDOM OF [ TRUE, FALSE ]
        IF transferSpore THEN
            copyTecton.ThrowSpore(spore)
            spore.SetTecton(copyTecton)
            spores.Remove(spore)
        END IF
    END WHILE

    IF this.shroomBody IS NOT NULL THEN
        transferBody := RANDOM OF [ TRUE, FALSE ]

        IF transferBody THEN
            copyTecton.SetShroomBody(shroomBody)
            shroomBody.SetTecton(copyTecton)
            this.ClearShroomBody()
        END IF
    END IF
END METHOD

METHOD GrowShroomBody(body) -> implemented
    IF shroomBody IS NULL THEN
        RETURN FALSE
    END IF

    consumedSpore := FIRST spore IN spores WHERE spore.GetShroom() == body.GetShroom()

    IF consumedSpore IS NOT NULL
        RemoveSpore(consumedSpore)
    END IF

    shroomBody := body
    RETURN TRUE
END METHOD

METHOD HasGrownShroomThreadTo(tecton) -> implemented
    FOR EACH thread IN shroomThreads DO
        IF thread.IsTectonReachable(tecton) THEN
            RETURN TRUE
        END IF
    END FOR

    RETURN FALSE
END METHOD
